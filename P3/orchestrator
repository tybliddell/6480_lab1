#!/bin/bash

HOST_A="p3-host-a-1"
HOST_B="p3-host-b-1"
R1="p3-r1-1"
R2="p3-r2-1"
R3="p3-r3-1"
R4="p3-r4-1"

display_help() {
    echo "Usage: orchestaor [-h | --help] <command>

commands:
    init
    start-ospf
    add-routes
    add-r4
    move-traffic
    remove-r2
    host-ping
    ping-loop
    dump-r2
    dump-r4"
}

run_command() {
    case $COMMAND in
        init)
            if [ -n "$(sudo docker ps | grep $HOST_A)" ]; then
                echo "Containers are currently up, shutting down first"
                sudo docker compose --profile r4 down
            fi
            sudo docker compose up -d --build
            sleep 2 # required for services, not a good way though...
            for container in $R1 $R2 $R3; do # stop services
                sudo docker exec $container service zebra stop
                sudo docker exec $container service ospfd stop
            done
            ;;
        start-ospf)
            echo "Starting ospf in R1, R2 and R3"
            for container in $R1 $R2 $R3; do
                sudo docker exec -it $container sh -c 'service zebra start'
                sudo docker exec -it $container sh -c 'service ospfd start'
            done
            ;;
        add-routes)
            echo "Adding routes in host-a and host-b"
            sudo docker exec $HOST_A route add -net 10.0.15.0/24 gw 10.0.10.4
            sudo docker exec $HOST_B route add -net 10.0.10.0/24 gw 10.0.15.3
            ;;
        add-r4)
            echo "Adding R4 to topology"
            sudo docker compose --profile r4 up -d --build
            sleep 2 # required for services, not a good way though...
            sudo docker exec $R4 bash -c "vtysh -c 'conf t' -c 'router ospf' -c 'interface eth0' -c 'ip ospf cost 30' -c 'exit' -c 'exit' -c 'write memory' -c 'exit'"
            sudo docker exec $R4 bash -c "vtysh -c 'conf t' -c 'router ospf' -c 'interface eth1' -c 'ip ospf cost 30' -c 'exit' -c 'exit' -c 'write memory' -c 'exit'"
            ;;
        move-traffic)
            echo "Moving traffic from R2 to R4"
            sudo docker exec $R2 bash -c "vtysh -c 'conf t' -c 'router ospf' -c 'interface eth0' -c 'ip ospf cost 40' -c 'exit' -c 'exit' -c 'write memory' -c 'exit'"
            sudo docker exec $R2 bash -c "vtysh -c 'conf t' -c 'router ospf' -c 'interface eth1' -c 'ip ospf cost 40' -c 'exit' -c 'exit' -c 'write memory' -c 'exit'"
            ;;
        remove-r2)
            echo "Removing R2 from topology"
            sudo docker stop $R2
            ;;
        host-ping)
            echo "pinging from host-a to host-b"
            sudo docker exec -it $HOST_A timeout 5 ping 10.0.15.4
            echo "pinging from host-b to host-a"
            sudo docker exec -it $HOST_B timeout 5 ping 10.0.10.3
            ;;
        ping-loop)
            sudo docker exec -it $HOST_A ping 10.0.15.4
            ;;
        dump-r2)
            sudo docker exec -it $R2 tcpdump
            ;;
        dump-r4)
            sudo docker exec -it $R4 tcpdump
            ;;
        *)
            echo "unknown command: $COMMAND"
            exit 1
            ;;
    esac
    exit 0
}

while [[ "$#" -gt 0 ]]; do
    case $1 in
        -h | --help) display_help; exit 0 ;;
        -*) echo "Unknown parameter passed: $1"; exit 1 ;;
        *) COMMAND="$1" ;;
    esac
    shift
done

if [ -z "$COMMAND" ]; then
    display_help   
    exit 0
fi

run_command